services:
  zoo1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo1
    container_name: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    extends:
      file: common-config.yml
      service: network-deploy-service

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - zoo1
    extends:
      file: common-config.yml
      service: network-deploy-service

  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka2
    container_name: kafka2
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - zoo1
    extends:
      file: common-config.yml
      service: network-deploy-service

  kafka3:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka3
    container_name: kafka3
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      - zoo1
    extends:
      file: common-config.yml
      service: network-deploy-service

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: keycloak
    ports:
      - "7080:8080"
    volumes:
      - ./init-scripts/keycloak_XianweiECommerce.json:/opt/keycloak/data/import/realm-config.json
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KC_IMPORT: /opt/keycloak/data/import/realm-config.json
    command: ["start-dev", "--import-realm"]
    healthcheck:
      test: ["CMD-SHELL", "curl --head -fsS http://localhost:8080/health/ready || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: network-deploy-service

  redis-master:
    image: redis:7.0.9
    hostname: redis-master
    container_name: redis-master
    ports:
      - "6379:6379"
    command: redis-server --requirepass wxwwxw123 --appendonly yes
    extends:
      file: common-config.yml
      service: network-deploy-service

  redis-sentinel1:
    image: redis:7.0.9
    hostname: redis-sentinel1
    container_name: redis-sentinel1
    ports:
      - "26379:26379"
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel1.conf:/usr/local/etc/redis/sentinel.conf
    depends_on:
      - redis-master
    extends:
      file: common-config.yml
      service: network-deploy-service

  redis-sentinel2:
    image: redis:7.0.9
    hostname: redis-sentinel2
    container_name: redis-sentinel2
    ports:
      - "26380:26380"
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel2.conf:/usr/local/etc/redis/sentinel.conf
    depends_on:
      - redis-master
    extends:
      file: common-config.yml
      service: network-deploy-service

  redis-sentinel3:
    image: redis:7.0.9
    hostname: redis-sentinel3
    container_name: redis-sentinel3
    ports:
      - "26381:26381"
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel3.conf:/usr/local/etc/redis/sentinel.conf
    depends_on:
      - redis-master
    extends:
      file: common-config.yml
      service: network-deploy-service

  redis-slave1:
    image: redis:7.0.9
    hostname: redis-slave1
    container_name: redis-slave1
    ports:
      - "6380:6379"
    command: redis-server --slaveof redis-master 6379 --masterauth wxwwxw123 --requirepass wxwwxw123
    depends_on:
      - redis-master
    extends:
      file: common-config.yml
      service: network-deploy-service

  redis-slave2:
    image: redis:7.0.9
    hostname: redis-slave2
    container_name: redis-slave2
    ports:
      - "6381:6379"
    command: redis-server --slaveof redis-master 6379 --masterauth wxwwxw123 --requirepass wxwwxw123
    depends_on:
      - redis-master
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:
    image: "xianwei/configserver:v1"
    container_name: configserver
    ports:
      - "8090:8090"
    healthcheck:
      test: "curl --fail --silent http://localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      OTEL_SERVICE_NAME: "configserver"
    depends_on:
      - kafka1
      - kafka2
      - kafka3
      - redis-master
      - redis-sentinel1
      - redis-sentinel2
      - redis-sentinel3

  eurekaserver1:
    image: "xianwei/eurekaserver:v1"
    container_name: eurekaserver1
    ports:
      - "8761:8761"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver1"
      SPRING_PROFILES_ACTIVE: "eurekaserver1"
      OTEL_SERVICE_NAME: "eurekaserver1"
      EUREKA_INSTANCE_HOSTNAME: "eurekaserver1"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver2:8762/eureka/,http://eurekaserver3:8763/eureka/"

  eurekaserver2:
    image: "xianwei/eurekaserver:v1"
    container_name: eurekaserver2
    ports:
      - "8762:8762"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8762/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver2"
      SPRING_PROFILES_ACTIVE: "eurekaserver2"
      OTEL_SERVICE_NAME: "eurekaserver2"
      EUREKA_INSTANCE_HOSTNAME: "eurekaserver2"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver1:8761/eureka/,http://eurekaserver3:8763/eureka/"

  eurekaserver3:
    image: "xianwei/eurekaserver:v1"
    container_name: eurekaserver3
    ports:
      - "8763:8763"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8763/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver3"
      SPRING_PROFILES_ACTIVE: "eurekaserver3"
      OTEL_SERVICE_NAME: "eurekaserver3"
      EUREKA_INSTANCE_HOSTNAME: "eurekaserver3"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eurekaserver1:8761/eureka/,http://eurekaserver2:8762/eureka/"

  userservice-master:
    image: mysql:latest
    container_name: userservice-master
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
      MYSQL_DATABASE: userservice
      MYSQL_ALLOW_EMPTY_PASSWORD: true
    ports:
      - "3307:3306"
    volumes:
      - userservice_master_data:/var/lib/mysql
      - ./conf.d/master/userservice:/etc/mysql/conf.d
      - ./init-scripts/userservice-master:/docker-entrypoint-initdb.d
    command: ["/bin/sh", "-c", "chmod 644 /etc/mysql/conf.d/my.cnf && exec docker-entrypoint.sh --bind-address=0.0.0.0 --mysql-native-password=ON "]
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 30s
      retries: 10

  userservice-slave:
    image: mysql:latest
    container_name: userservice-slave
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
      MYSQL_DATABASE: userservice
      MYSQL_ALLOW_EMPTY_PASSWORD: true
    ports:
      - "3308:3306"
    volumes:
      - userservice_slave_data:/var/lib/mysql
      - ./conf.d/slave:/etc/mysql/conf.d
      - ./init-scripts/userservice-slave:/docker-entrypoint-initdb.d
    command: ["/bin/sh", "-c", "chmod 644 /etc/mysql/conf.d/my.cnf && exec docker-entrypoint.sh --bind-address=0.0.0.0 --mysql-native-password=ON"]
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 30s
      retries: 10
    depends_on:
      userservice-master:
        condition: service_healthy

  orderservice-master:
    image: mysql:latest
    container_name: orderservice-master
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
      MYSQL_DATABASE: orderservice
      MYSQL_ALLOW_EMPTY_PASSWORD: true
    ports:
      - "3309:3306"
    volumes:
      - orderservice_master_data:/var/lib/mysql
      - ./conf.d/master/orderservice:/etc/mysql/conf.d
      - ./init-scripts/orderservice-master:/docker-entrypoint-initdb.d
    command: ["/bin/sh", "-c", "chmod 644 /etc/mysql/conf.d/my.cnf && exec docker-entrypoint.sh --bind-address=0.0.0.0 --mysql-native-password=ON"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 30s
      retries: 10

  orderservice-slave:
    image: mysql:latest
    container_name: orderservice-slave
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
      MYSQL_DATABASE: orderservice
      MYSQL_ALLOW_EMPTY_PASSWORD: true
    ports:
      - "3310:3306"
    volumes:
      - orderservice_slave_data:/var/lib/mysql
      - ./conf.d/slave:/etc/mysql/conf.d
      - ./init-scripts/orderservice-slave:/docker-entrypoint-initdb.d
    command: ["/bin/sh", "-c", "chmod 644 /etc/mysql/conf.d/my.cnf && exec docker-entrypoint.sh --bind-address=0.0.0.0 --mysql-native-password=ON"]
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 30s
      retries: 10
    depends_on:
      orderservice-master:
        condition: service_healthy

  itemservice-master:
    image: mysql:latest
    container_name: itemservice-master
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
      MYSQL_DATABASE: itemservice
      MYSQL_ALLOW_EMPTY_PASSWORD: true
    ports:
      - "3311:3306"
    volumes:
      - itemservice_master_data:/var/lib/mysql
      - ./conf.d/master/itemservice:/etc/mysql/conf.d
      - ./init-scripts/itemservice-master:/docker-entrypoint-initdb.d
    command: ["/bin/sh", "-c", "chmod 644 /etc/mysql/conf.d/my.cnf && exec docker-entrypoint.sh --bind-address=0.0.0.0 --mysql-native-password=ON"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 30s
      retries: 10

  itemservice-slave:
    image: mysql:latest
    container_name: itemservice-slave
    extends:
      file: common-config.yml
      service: microservice-base-config
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
      MYSQL_DATABASE: itemservice
      MYSQL_ALLOW_EMPTY_PASSWORD: true
    ports:
      - "3312:3306"
    volumes:
      - itemservice_slave_data:/var/lib/mysql
      - ./conf.d/slave:/etc/mysql/conf.d
      - ./init-scripts/itemservice-slave:/docker-entrypoint-initdb.d
    command: ["/bin/sh", "-c", "chmod 644 /etc/mysql/conf.d/my.cnf && exec docker-entrypoint.sh --bind-address=0.0.0.0 --mysql-native-password=ON"]
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 30s
      retries: 10
    depends_on:
      itemservice-master:
        condition: service_healthy

  paymentservice-failed-messages:
    extends:
      file: common-config.yml
      service: microservice-base-config
    image: mysql:latest
    container_name: paymentservice-failed-messages
    ports:
      - "3313:3306"
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
      MYSQL_DATABASE: paymentservice
    volumes:
      - paymentservice_failed_messages_data:/var/lib/mysql
      - ./init-scripts/paymentservice:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 30s
      retries: 10

  user:
    image: "xianwei/user:v1"
    container_name: user
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver1:
        condition: service_healthy
      userservice-master:
        condition: service_healthy
      userservice-slave:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "user"
      OTEL_SERVICE_NAME: "user"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  item:
    image: "xianwei/item:v1"
    container_name: item
    ports:
      - "8040:8040"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver1:
        condition: service_healthy
      itemservice-master:
        condition: service_healthy
      itemservice-slave:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8040/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "item"
      OTEL_SERVICE_NAME: "item"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  order:
    image: "xianwei/order:v1"
    container_name: order
    ports:
      - "8050:8050"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver1:
        condition: service_healthy
      orderservice-master:
        condition: service_healthy
      orderservice-slave:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8050/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "order"
      OTEL_SERVICE_NAME: "order"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  payment:
    image: "xianwei/payment:v1"
    container_name: payment
    ports:
      - "8060:8060"
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver1:
        condition: service_healthy
      paymentservice-failed-messages:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8060/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "payment"
      OTEL_SERVICE_NAME: "payment"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  gatewayserver:
    image: "xianwei/gatewayserver:v1"
    container_name: gatewayserver
    ports:
      - "8081:8080"
    depends_on:
      user:
        condition: service_healthy
      order:
        condition: service_healthy
      item:
        condition: service_healthy
      payment:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
      OTEL_SERVICE_NAME: "gatewayserver"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: "http://keycloak:8080/realms/XianweiECommerce/protocol/openid-connect/certs"
    healthcheck:
      test: "curl --fail --silent http://localhost:8081/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./../../../../../frontend/build:/usr/share/nginx/html
      - ./ssl/nginx.crt:/etc/nginx/ssl/nginx.crt
      - ./ssl/nginx.key:/etc/nginx/ssl/nginx.key
    depends_on:
      - gatewayserver
    extends:
      file: common-config.yml
      service: microservice-base-config

volumes:
  userservice_master_data:
  userservice_slave_data:
  orderservice_master_data:
  orderservice_slave_data:
  itemservice_master_data:
  itemservice_slave_data:
  paymentservice_failed_messages_data:

networks:
  XianweiECommerce:
    driver: "bridge"
