services:
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: keycloak
    ports:
      - "7080:8080"
    volumes:
      - ./init-scripts/keycloak_XianweiECommerce.json:/opt/keycloak/data/import/realm-config.json
    environment:
      KEYCLOAK_ADMIN: "admin"
      KEYCLOAK_ADMIN_PASSWORD: "admin"
      KC_IMPORT: /opt/keycloak/data/import/realm-config.json
    command: ["start-dev", "--import-realm"]
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/realms/XianweiECommerce/.well-known/openid-configuration | grep issuer || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:
    image: "xianwei/configserver:v1"
    container_name: configserver
    ports:
      - "8090:8090"
    depends_on:
      keycloak:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config
    volumes:
      - ./config-repo:/config-repo
    environment:
      OTEL_SERVICE_NAME: "configserver"

  eurekaserver:
    image: "xianwei/eurekaserver:v1"
    container_name: eurekaserver
    ports:
      - "8761:8761"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"
      OTEL_SERVICE_NAME: "eurekaserver"
    networks:
      - XianweiECommerce

  userservice-master:
    image: mysql:latest
    container_name: userservice-master
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
      MYSQL_DATABASE: userservice
    ports:
      - "3306:3306"
    volumes:
      - userservice_master_data:/var/lib/mysql
      - ./init-scripts/userservice-master:/docker-entrypoint-initdb.d
    command: docker-entrypoint.sh mysqld
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 30s
      retries: 10

  userservice-slave:
    image: mysql:latest
    container_name: userservice-slave
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
    ports:
      - "3307:3306"
    volumes:
      - userservice_slave_data:/var/lib/mysql
      - ./init-scripts/userservice-slave:/docker-entrypoint-initdb.d
      - ./wait-for-it.sh:/wait-for-it.sh
    depends_on:
      userservice-master:
        condition: service_healthy
    command: >
      sh -c "/wait-for-it.sh userservice-master:3306 -- 
      mysql -h userservice-master -u root -pwxwwxw123 -e 'CHANGE MASTER TO MASTER_HOST=\"userservice-master\", MASTER_USER=\"root\", MASTER_PASSWORD=\"wxwwxw123\", MASTER_AUTO_POSITION=1; START SLAVE; SHOW SLAVE STATUS\G' && docker-entrypoint.sh mysqld"

  orderservice-master:
    image: mysql:latest
    container_name: orderservice-master
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
      MYSQL_DATABASE: orderservice
    ports:
      - "3308:3306"
    volumes:
      - orderservice_master_data:/var/lib/mysql
      - ./init-scripts/orderservice-master:/docker-entrypoint-initdb.d
    command: docker-entrypoint.sh mysqld
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 30s
      retries: 10

  orderservice-slave:
    image: mysql:latest
    container_name: orderservice-slave
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
    ports:
      - "3309:3306"
    volumes:
      - orderservice_slave_data:/var/lib/mysql
      - ./init-scripts/orderservice-slave:/docker-entrypoint-initdb.d
      - ./wait-for-it.sh:/wait-for-it.sh
    depends_on:
      orderservice-master:
        condition: service_healthy
    command: >
      sh -c "/wait-for-it.sh orderservice-master:3306 -- 
      mysql -h orderservice-master -u root -pwxwwxw123 -e 'CHANGE MASTER TO MASTER_HOST=\"orderservice-master\", MASTER_USER=\"root\", MASTER_PASSWORD=\"wxwwxw123\", MASTER_AUTO_POSITION=1; START SLAVE; SHOW SLAVE STATUS\G' && docker-entrypoint.sh mysqld"

  itemservice-master:
    image: mysql:latest
    container_name: itemservice-master
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
      MYSQL_DATABASE: itemservice
    ports:
      - "3310:3306"
    volumes:
      - itemservice_master_data:/var/lib/mysql
      - ./init-scripts/itemservice-master:/docker-entrypoint-initdb.d
    command: docker-entrypoint.sh mysqld
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 30s
      retries: 10

  itemservice-slave:
    image: mysql:latest
    container_name: itemservice-slave
    environment:
      MYSQL_ROOT_PASSWORD: wxwwxw123
    ports:
      - "3311:3306"
    volumes:
      - itemservice_slave_data:/var/lib/mysql
      - ./init-scripts/itemservice-slave:/docker-entrypoint-initdb.d
      - ./wait-for-it.sh:/wait-for-it.sh
    depends_on:
      itemservice-master:
        condition: service_healthy
    command: >
      sh -c "/wait-for-it.sh itemservice-master:3306 -- 
      mysql -h itemservice-master -u root -pwxwwxw123 -e 'CHANGE MASTER TO MASTER_HOST=\"itemservice-master\", MASTER_USER=\"root\", MASTER_PASSWORD=\"wxwwxw123\", MASTER_AUTO_POSITION=1; START SLAVE; SHOW SLAVE STATUS\G' && docker-entrypoint.sh mysqld"

  user:
    image: "xianwei/user:v1"
    container_name: user
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "user"
      OTEL_SERVICE_NAME: "user"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  item:
    image: "xianwei/item:v1"
    container_name: item
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8040/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "item"
      OTEL_SERVICE_NAME: "item"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  order:
    image: "xianwei/order:v1"
    container_name: order
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8050/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "order"
      OTEL_SERVICE_NAME: "order"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  payment:
    image: "xianwei/payment:v1"
    container_name: payment
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "curl --fail --silent http://localhost:8060/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "payment"
      OTEL_SERVICE_NAME: "payment"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  gateway:
    image: "xianwei/gatewayserver:v1"
    container_name: gateway
    ports:
      - "8080:8080"
    depends_on:
      user:
        condition: service_healthy
      order:
        condition: service_healthy
      item:
        condition: service_healthy
      payment:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "gateway"
      OTEL_SERVICE_NAME: "gateway"
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: "http://keycloak:7080/realms/XianweiECommerce/protocol/openid-connect/certs"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

volumes:
  userservice_master_data:
  userservice_slave_data:
  orderservice_master_data:
  orderservice_slave_data:
  itemservice_master_data:
  itemservice_slave_data:

networks:
  XianweiECommerce:
    driver: "bridge"
